@page "/weather"
@attribute [StreamRendering]

<PageTitle>Weather</PageTitle>
<MudGrid>
    <MudItem xs="12">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8" Elevation="0">
            <MudText Align="Align.Center" Typo="Typo.h5">Weather</MudText>           
        </MudPaper>
        <MudPaper Class="d-flex align-center justify-center mud-width-full" Elevation="0">
            <MudText Typo="Typo.body2">This component demonstrates showing data.</MudText>
        </MudPaper>
    </MudItem>    
</MudGrid>

@if (forecasts == null)
{
    <MudGrid>
        <MudItem xs="12" Elevation="2">
            <MudPaper Class="d-flex align-center justify-center mud-width-full py-8" Elevation="0">
                <MudText Align="Align.Center" Typo="Typo.h5">Loading...</MudText>
            </MudPaper>           
        </MudItem>        
    </MudGrid>
}
else
{
    <MudSimpleTable Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Style="overflow-x: auto;">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </MudSimpleTable>
}

@code {
    private WeatherForecast[]? forecasts;
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
